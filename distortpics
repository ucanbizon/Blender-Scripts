import cv2
import numpy as np
import os
import bmesh
import bpy

class Camera:
    #
    # the focal lengths (fx, fy) are expressed in pixel units.
    # to fix fx/fy ratio, use CV_CALIB_FIX_ASPECT_RATIO. (ideally, fx == fy)

    # a principal point (cx, cy) is usually at the image center.

    # dim = np.array([600, 880]) # w, h [mm]
    # dim = np.array([300, 300])  # w, h [mm]
    sensor_size = (22, 11.88)  # w, h [mm]
    image_res = (4000, 2160)

    def __init__(self, idx, name, avb):
        self.index = idx
        self.is_available = avb
        self.images = []
        self.name = name
        self.render = True

        # w.r.t. global coordinates system
        self.SE3 = None

        # ret: the mean reprojection error (it should be as close to zero as possible);
        # mtx: the matrix of intrisic parameters;
        # dist: the distortion parameters: 3 in radial distortion, 2 in tangential distortion;
        self.rms_err = -1.0
        self.M = None
        self.d = None
        self.focal_lengths = (0, 0)
        self.central_points = (0,0)
        self.focal_lengths_in_pixel = (0, 0)
        self.central_points_in_pixel = (0,0)
        self.k1 = 0
        self.k2 = 0
        self.k3 = 0
        self.p1 = 0
        self.p2 = 0
        # 3d-2d projection pair (frame x points x 2d)
        self.measured_2d_points = []



    def set_M(self, M_):
        self.M = M_
        self.focal_lengths = (self.M[0, 0] * self.sensor_size[0] / self.image_res[0], self.M[1, 1] * self.sensor_size[1] / self.image_res[1])
        self.central_points = (self.M[0, 2] / self.image_res[0] - 0.5, self.M[1, 2] / self.image_res[1] - 0.5)
        self.focal_lengths_in_pixel = (self.M[0, 0], self.M[1, 1])
        self.central_points_in_pixel = (self.M[0, 2],self.M[1, 2])
    def set_d(self, d_):
        self.d = d_
        self.k1 = self.d[0][0]
        self.k2 = self.d[0][1]
        self.k3 = self.d[0][4]
        self.p1 = self.d[0][2]
        self.p2 = self.d[0][3]

    def set_SE3(self, SE3_):
        self.SE3 = SE3_





# for intrinsic calibration
cameras = [Camera(0, r'\A001_05290330_C001', True), Camera(1, r'\B001_07072140_C001', True),
           Camera(2, r'\C001_06070320_C001', True), Camera(3, r'\D001_05061515_C001', True),
           Camera(4, r'\E001_04210958_C001', True), Camera(5, r'\F001_05151133_C001', True),
           Camera(6, r'\G001_05052127_C001', True), Camera(7, r'\H001_05191504_C001', True)]

cam2char = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']
directory = r'C:\Users\ucanb\Desktop\scan_mov\cameraset\Calib'
image_directory = r'C:\Users\ucanb\Desktop\scan_mov\cameraset\Calib\render_images'
extrinsic_filename = 'coord_sys_output.xml'
se3_xml_path = os.path.join(directory, extrinsic_filename)


bpy.context.scene.render.resolution_x = Camera.image_res[0]
bpy.context.scene.render.resolution_y = Camera.image_res[1]

for camera in cameras:
    if camera.is_available:
        intrinsics_xml_path = directory + "\Intrinsics" + cam2char[camera.index] + '.xml'
        print(intrinsics_xml_path)
        cv_file = cv2.FileStorage(intrinsics_xml_path, cv2.FILE_STORAGE_READ)
        M = cv_file.getNode('M1').mat()
        d = cv_file.getNode('D1').mat()
        camera.set_M(M)
        camera.set_d(d)
        
        cv_file = cv2.FileStorage(se3_xml_path, cv2.FILE_STORAGE_READ)
        se3 = cv_file.getNode('H_w_' + cam2char[camera.index]).mat()

        camera.set_SE3(se3)

        
    else:
        print("* Camera[{}] set as not available")



for camera in cameras:
    image = cv2.imread(image_directory + '\\' + cam2char[camera.index] + "Cam.000.png" )
    height, width = image.shape[:2]
    maxEdge = max(image.shape[0:2])
    mapx = np.zeros((height,width), np.float32)
    mapy = np.zeros((height,width), np.float32)
    for in_y in range(0, height):
        for in_x in range(0, width):
            x = (in_x - camera.central_points_in_pixel[0]) / camera.focal_lengths_in_pixel[0]
            y = (in_y - camera.central_points_in_pixel[1]) / camera.focal_lengths_in_pixel[1]
            r2 = x * x + y * y
            kcoef = 1 + camera.k1 * r2 + camera.k2 * r2 * r2 + camera.k3 * r2 * r2 * r2
            x_ = x * kcoef + 2 * camera.p1 * x * y + camera.p2 * (r2 + 2 * x * x)
            y_ = y * kcoef + camera.p1 * (r2 + 2 * y * y) + 2 * camera.p2 * x * y
            out_x = x_ * camera.focal_lengths_in_pixel[0] + camera.central_points_in_pixel[0]
            out_y = y_ * camera.focal_lengths_in_pixel[1] + camera.central_points_in_pixel[1]

            mapx[int(round(out_y)),int(round(out_x))] = in_x
            mapy[int(round(out_y)),int(round(out_x))] = in_y
    
    distorted_img = cv2.remap(image, mapx, mapy, cv2.INTER_LINEAR)
    cv2.imwrite(image_directory + '\\' + cam2char[camera.index] + "CamDistorted.000.png" , distorted_img)
